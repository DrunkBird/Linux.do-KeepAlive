# -*- coding: utf-8 -*-
import os
import time
import logging
import random
from os import path
from io import StringIO
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
import shutil

logger = logging.getLogger()
logger.setLevel(logging.INFO)

console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)

formatter = logging.Formatter(
    "[%(asctime)s %(levelname)s] %(message)s", datefmt="%H:%M:%S"
)

console_handler.setFormatter(formatter)

logger.addHandler(console_handler)

USERNAME = os.getenv("LINUXDO_USERNAME")
PASSWORD = os.getenv("LINUXDO_PASSWORD")
SCROLL_DURATION = int(os.getenv("SCROLL_DURATION", 0))
HOME_URL = os.getenv("HOME_URL", "https://linux.do/")
CONNECT_URL = os.getenv("CONNECT_URL", "https://connect.linux.do/")

browse_count = 0
connect_info = ""

missing_configs = []

if not USERNAME:
    missing_configs.append("USERNAME")
if not PASSWORD:
    missing_configs.append("PASSWORD")

if missing_configs:
    logging.error(f"Áº∫Â∞ëÂøÖË¶ÅÈÖçÁΩÆ: {', '.join(missing_configs)}ÔºåËØ∑Âú®ÁéØÂ¢ÉÂèòÈáè‰∏≠ËÆæÁΩÆ„ÄÇ")
    exit(1)


def load_send():
    cur_path = path.abspath(path.dirname(__file__))
    if path.exists(cur_path + "/notify.py"):
        try:
            from notify import send

            return send
        except ImportError:
            return False
    else:
        return False


class LinuxDoBrowser:
    def __init__(self) -> None:
        logging.info("ÂêØÂä® Selenium")

        chrome_options = webdriver.ChromeOptions()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--disable-dev-shm-usage")

        chromedriver_path = shutil.which("chromedriver")

        if not chromedriver_path:
            logging.error("chromedriver Êú™ÊâæÂà∞ÔºåËØ∑Á°Æ‰øùÂ∑≤ÂÆâË£ÖÂπ∂ÈÖçÁΩÆÊ≠£Á°ÆÁöÑË∑ØÂæÑ„ÄÇ")
            exit(1)

        self.driver = webdriver.Chrome(
            service=Service(chromedriver_path), options=chrome_options
        )

        logging.info("ÂØºËà™Âà∞LINUX DOÈ¶ñÈ°µ")
        self.driver.get(HOME_URL)
        logging.info("ÂàùÂßãÂåñÂÆåÊàê")

    def simulate_typing(self, element, text, typing_speed=0.1, random_delay=True):
        for char in text:
            element.send_keys(char)
            if random_delay:
                time.sleep(typing_speed + random.uniform(0, 0.1))
            else:
                time.sleep(typing_speed)

    def login(self) -> bool:
        try:
            logging.info("--- ÂºÄÂßãÂ∞ùËØïÁôªÂΩï ---")

            login_button = WebDriverWait(self.driver, 20).until(
                EC.element_to_be_clickable(
                    (By.CSS_SELECTOR, ".login-button .d-button-label")
                )
            )
            login_button.click()

            username_field = WebDriverWait(self.driver, 20).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "#login-account-name"))
            )
            self.simulate_typing(username_field, USERNAME)

            password_field = WebDriverWait(self.driver, 20).until(
                EC.presence_of_element_located(
                    (By.CSS_SELECTOR, "#login-account-password")
                )
            )
            self.simulate_typing(password_field, PASSWORD)

            submit_button = WebDriverWait(self.driver, 20).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "#login-button"))
            )
            submit_button.click()

            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "#current-user"))
            )
            logging.info("ÁôªÂΩïÊàêÂäü")
            return True

        except Exception as e:
            error_message = self.driver.find_elements(
                By.CSS_SELECTOR, "#modal-alert.alert-error"
            )
            if error_message:
                logging.error("ÁôªÂΩïÂ§±Ë¥•ÔºöÁî®Êà∑Âêç„ÄÅÁîµÂ≠êÈÇÆ‰ª∂ÊàñÂØÜÁ†Å‰∏çÊ≠£Á°Æ")
            else:
                logging.error(f"ÁôªÂΩïÂ§±Ë¥•Ôºö{e}")
            return False

    def load_all_topics(self):
        end_time = time.time() + SCROLL_DURATION
        actions = ActionChains(self.driver)

        while time.time() < end_time:
            actions.scroll_by_amount(0, 500).perform()
            time.sleep(0.1)

        logging.info("È°µÈù¢ÊªöÂä®ÂÆåÊàêÔºåÂ∑≤ÂÅúÊ≠¢Âä†ËΩΩÊõ¥Â§öÂ∏ñÂ≠ê")

    def click_topic(self):
        try:
            logging.info("--- ÂºÄÂßãÊªöÂä®È°µÈù¢Âä†ËΩΩÊõ¥Â§öÂ∏ñÂ≠ê ---")
            self.load_all_topics()
            topics = self.driver.find_elements(By.CSS_SELECTOR, "#list-area .title")
            total_topics = len(topics)
            logging.info(f"ÂÖ±ÊâæÂà∞ {total_topics} ‰∏™Â∏ñÂ≠ê")

            logging.info("--- ÂºÄÂßãÊµèËßàÂ∏ñÂ≠ê ---")
            global browse_count

            for idx, topic in enumerate(topics):
                parent_element = topic.find_element(By.XPATH, "./ancestor::tr")

                is_pinned = parent_element.find_elements(
                    By.CSS_SELECTOR, ".topic-statuses .pinned"
                )

                if is_pinned:
                    logging.info(f"Ë∑≥ËøáÁΩÆÈ°∂ÁöÑÂ∏ñÂ≠êÔºö{topic.text.strip()}")
                    continue
                article_title = topic.text.strip()
                logging.info(f"ÊâìÂºÄÁ¨¨ {idx + 1}/{len(topics)} ‰∏™Â∏ñÂ≠ê Ôºö{article_title}")
                article_url = topic.get_attribute("href")

                self.driver.execute_script("window.open('');")
                self.driver.switch_to.window(self.driver.window_handles[-1])

                try:
                    browse_start_time = time.time()
                    self.driver.get(article_url)
                    time.sleep(3)

                except Exception as e:
                    logging.warning(
                        f"ÊâìÂºÄÂ∏ñÂ≠ê Ôºö {article_title} Êó∂ÂèëÁîüÈîôËØØÔºåË∑≥ËøáËØ•Â∏ñÂ≠ê„ÄÇÈîôËØØ‰ø°ÊÅØ: {e}"
                    )

                finally:
                    browse_count += 1
                    start_time = time.time()
                    scroll_duration = random.uniform(5, 10)
                    # screenshot_interval = 2  # ËÆæÁΩÆÊà™ÂõæÈó¥ÈöîÊó∂Èó¥ÔºåÂçï‰ΩçÊòØÁßí
                    # screenshot_count = 0
                    try:
                        while time.time() - start_time < scroll_duration:
                            self.driver.execute_script(
                                "window.scrollBy(0, window.innerHeight);"
                            )

                            # screenshot_count += 1
                            # screenshot_filename = (
                            #     f"screenshot_{idx + 1}_{screenshot_count}.png"
                            # )
                            # self.driver.save_screenshot(screenshot_filename)
                            # logging.info(f"Â∑≤‰øùÂ≠òÊà™Âõæ: {screenshot_filename}")
                            # time.sleep(screenshot_interval)

                    except Exception as e:
                        logging.warning(f"Âú®ÊªöÂä®ËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ: {e}")
                        return False

                    browse_end_time = time.time()
                    total_browse_time = browse_end_time - browse_start_time
                    logging.info(f"ÊµèËßàËØ•Â∏ñÂ≠êÊó∂Èó¥: {total_browse_time:.2f}Áßí")
                    self.driver.close()
                    self.driver.switch_to.window(self.driver.window_handles[0])
                    logging.info(
                        f"Â∑≤ÂÖ≥Èó≠Á¨¨ {idx + 1}/{len(topics)} ‰∏™Â∏ñÂ≠ê Ôºö {article_title}"
                    )

        except Exception as e:
            logging.error(f"Â§ÑÁêÜÂ∏ñÂ≠êÊó∂Âá∫Èîô: {e}")

    def run(self):
        start_time = time.time()
        try:
            if not self.login():
                return
            self.click_topic()
            logging.info("üéâÊÅ≠Âñú‰Ω†ÔºåÂ∏ñÂ≠êÊµèËßàÂÖ®ÈÉ®ÂÆåÊàê")
        except Exception as e:
            logging.error(f"ËøêË°åËøáÁ®ã‰∏≠Âá∫Èîô: {e}")
        finally:
            end_time = time.time()
            spend_time = int((end_time - start_time) // 60)
            self.print_connect_info()
            self.driver.quit()
            send = load_send()
            if callable(send):
                send(
                    "Linux.doÊµèËßàÂ∏ñÂ≠ê",
                    f"Êú¨Ê¨°ÂÖ±ÊµèËßà{browse_count}‰∏™Â∏ñÂ≠ê\nÂÖ±Áî®Êó∂{spend_time}ÂàÜÈíü\n{connect_info}",
                )
            else:
                print("\nÂä†ËΩΩÈÄöÁü•ÊúçÂä°Â§±Ë¥•")

    def print_connect_info(self):
        self.driver.execute_script("window.open('');")
        self.driver.switch_to.window(self.driver.window_handles[-1])
        logging.info("ÂØºËà™Âà∞LINUX DO ConnectÈ°µÈù¢")
        self.driver.get(CONNECT_URL)

        global connect_info

        rows = self.driver.find_elements(By.CSS_SELECTOR, "table tr")

        info = []

        for row in rows:
            cells = row.find_elements(By.TAG_NAME, "td")
            if len(cells) >= 3:
                project = cells[0].text.strip()
                current = cells[1].text.strip()
                requirement = cells[2].text.strip()
                info.append([project, current, requirement])

        column_widths = [24, 22, 16]

        def calculate_content_width(content):
            return sum(2 if ord(char) > 127 else 1 for char in content)

        def format_cell(content, width, alignment="left"):
            content_length = calculate_content_width(content)
            padding = width - content_length
            if padding > 0:
                if alignment == "left":
                    return content + " " * padding
                elif alignment == "right":
                    return " " * padding + content
                elif alignment == "center":
                    left_padding = padding // 2
                    right_padding = padding - left_padding
                    return " " * left_padding + content + " " * right_padding
            else:
                return content[:width]

        def build_row(cells):
            return "| " + " | ".join(cells) + " |"

        def build_separator():
            return "+" + "+".join(["-" * (width + 2) for width in column_widths]) + "+"

        formatted_info = [
            build_row(
                [
                    format_cell(row[0], column_widths[0]),
                    format_cell(row[1], column_widths[1], "center"),
                    format_cell(row[2], column_widths[2], "center"),
                ]
            )
            for row in info
        ]

        header = build_row(
            [
                format_cell("È°πÁõÆ", column_widths[0]),
                format_cell("ÂΩìÂâç", column_widths[1], "center"),
                format_cell("Ë¶ÅÊ±Ç", column_widths[2], "center"),
            ]
        )

        separator = build_separator()

        output = StringIO()
        output.write("Âú®ËøáÂéª üíØ Â§©ÂÜÖÔºö\n")
        output.write(separator + "\n")
        output.write(header + "\n")
        output.write(separator.replace("-", "=") + "\n")
        output.write("\n".join(formatted_info) + "\n")
        output.write(separator + "\n")

        table_output = output.getvalue()
        output.close()

        print(table_output)

        connect_info = "\nÂú®ËøáÂéª üíØ Â§©ÂÜÖÔºö\n" + "\n".join(
            [f"{row[0]}Ôºà{row[2]}ÔºâÔºö{row[1]}" for row in info]
        )

        self.driver.close()
        self.driver.switch_to.window(self.driver.window_handles[0])


if __name__ == "__main__":
    linuxdo_browser = LinuxDoBrowser()
    linuxdo_browser.run()
